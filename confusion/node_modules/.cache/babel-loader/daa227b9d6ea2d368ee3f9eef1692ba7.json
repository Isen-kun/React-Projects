{"ast":null,"code":"import * as ActionTypes from \"./ActionTypes\";\nimport { DISHES } from \"../shared/dishes\";\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = (dishId, rating, author, comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }\n});\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + \"dishes\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + \"comments\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + \"promotions\").then(response => response.json()).then(promos => dispatch(addPromos(promos)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["D:/Progs/Github Repos/React-Projects/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","fetchDishes","dispatch","dishesLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","dishes","addDishes","catch","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","PROMOS_LOADING","promosFailed","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"./ActionTypes\";\r\nimport { DISHES } from \"../shared/dishes\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\n\r\nexport const addComment = (dishId, rating, author, comment) => ({\r\n  type: ActionTypes.ADD_COMMENT,\r\n  payload: {\r\n    dishId: dishId,\r\n    rating: rating,\r\n    author: author,\r\n    comment: comment,\r\n  },\r\n});\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n  dispatch(dishesLoading(true));\r\n\r\n  return fetch(baseUrl + \"dishes\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((dishes) => dispatch(addDishes(dishes)))\r\n    .catch((error) => dispatch(dishesFailed(error.message)));\r\n};\r\n\r\nexport const dishesLoading = () => ({\r\n  type: ActionTypes.DISHES_LOADING,\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n  type: ActionTypes.DISHES_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n  type: ActionTypes.ADD_DISHES,\r\n  payload: dishes,\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n  return fetch(baseUrl + \"comments\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((comments) => dispatch(addComments(comments)))\r\n    .catch((error) => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n  type: ActionTypes.COMMENTS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n  type: ActionTypes.ADD_COMMENTS,\r\n  payload: comments,\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n  dispatch(promosLoading());\r\n\r\n  return fetch(baseUrl + \"promotions\")\r\n    .then((response) => response.json())\r\n    .then((promos) => dispatch(addPromos(promos)));\r\n};\r\n\r\nexport const promosLoading = () => ({\r\n  type: ActionTypes.PROMOS_LOADING,\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n  type: ActionTypes.PROMOS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n  type: ActionTypes.ADD_PROMOS,\r\n  payload: promos,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}