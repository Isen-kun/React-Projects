{"ast":null,"code":"import * as ActionTypes from \"./ActionTypes\";\nimport { DISHES } from \"../shared/dishes\";\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + \"comments\", {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log(\"post comments\", error.message);\n    alert(\"Your comment could not be posted\\nError: \" + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + \"dishes\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + \"comments\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + \"promotions\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + \"leaders\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["D:/Progs/Github Repos/React-Projects/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"./ActionTypes\";\r\nimport { DISHES } from \"../shared/dishes\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\n\r\nexport const addComment = (comment) => ({\r\n  type: ActionTypes.ADD_COMMENT,\r\n  payload: comment,\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n  const newComment = {\r\n    dishId: dishId,\r\n    rating: rating,\r\n    author: author,\r\n    comment: comment,\r\n  };\r\n  newComment.date = new Date().toISOString();\r\n\r\n  return fetch(baseUrl + \"comments\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newComment),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    credentials: \"same-origin\",\r\n  })\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        throw error;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((response) => dispatch(addComment(response)))\r\n    .catch((error) => {\r\n      console.log(\"post comments\", error.message);\r\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\r\n    });\r\n};\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n  dispatch(dishesLoading(true));\r\n\r\n  return fetch(baseUrl + \"dishes\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((dishes) => dispatch(addDishes(dishes)))\r\n    .catch((error) => dispatch(dishesFailed(error.message)));\r\n};\r\n\r\nexport const dishesLoading = () => ({\r\n  type: ActionTypes.DISHES_LOADING,\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n  type: ActionTypes.DISHES_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n  type: ActionTypes.ADD_DISHES,\r\n  payload: dishes,\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n  return fetch(baseUrl + \"comments\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((comments) => dispatch(addComments(comments)))\r\n    .catch((error) => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n  type: ActionTypes.COMMENTS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n  type: ActionTypes.ADD_COMMENTS,\r\n  payload: comments,\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n  dispatch(promosLoading());\r\n\r\n  return fetch(baseUrl + \"promotions\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((promos) => dispatch(addPromos(promos)))\r\n    .catch((error) => dispatch(promosFailed(error.message)));\r\n};\r\n\r\nexport const promosLoading = () => ({\r\n  type: ActionTypes.PROMOS_LOADING,\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n  type: ActionTypes.PROMOS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n  type: ActionTypes.ADD_PROMOS,\r\n  payload: promos,\r\n});\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n  dispatch(leadersLoading(true));\r\n\r\n  return fetch(baseUrl + \"leaders\")\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((leaders) => dispatch(addLeaders(leaders)))\r\n    .catch((error) => dispatch(leadersFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () => ({\r\n  type: ActionTypes.LEADERS_LOADING,\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.PROMOS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}